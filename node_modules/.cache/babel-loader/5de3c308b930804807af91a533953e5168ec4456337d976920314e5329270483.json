{"ast":null,"code":"var _jsxFileName = \"C:\\\\js\\\\projects\\\\copy\\\\src\\\\components\\\\ResultBox\\\\index.tsx\",\n  _s = $RefreshSig$();\nimport './index.scss';\nimport { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ResultBox = props => {\n  _s();\n  const [words, setWords] = useState(0);\n  const [characters, setCharacters] = useState(0);\n  const [sentences, setSentences] = useState(0);\n  const [paragraphs, setParagraphs] = useState(0);\n  const [pronouns, setPronouns] = useState(0);\n  function countWords(text) {\n    // Удаляем все пробелы в начале и конце текста\n    text = text.trim();\n\n    // Разделяем текст на отдельные слова по пробелам\n    var words = text.split(' ');\n\n    // Удаляем пустые элементы массива (в случае множественных пробелов)\n    words = words.filter(function (word) {\n      return word.length > 0;\n    });\n\n    // Возвращаем количество слов\n    return words.length;\n  }\n\n  // Пример использования\n\n  var wordCount = countWords(props.resultData);\n  console.log(props.resultData.trim().split(' ').length);\n  useEffect(() => {\n    //setCharacters(props.resultData.length)\n    setWords(wordCount);\n  }, [props]);\n  const resultBar = [{\n    title: 'Words',\n    value: words\n  }, {\n    title: 'Characters',\n    value: characters\n  }, {\n    title: 'Sentences',\n    value: sentences\n  }, {\n    title: 'Paragraphs ',\n    value: paragraphs\n  }, {\n    title: 'Pronouns',\n    value: pronouns\n  }];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"result-bar\",\n    children: resultBar.map(_ref => {\n      let {\n        title,\n        value\n      } = _ref;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"result-box\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"box-title\",\n          children: title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"box-value\",\n          children: value\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this)]\n      }, title, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n};\n_s(ResultBox, \"re1qtAVJwME4mqeptPWo5YCosaM=\");\n_c = ResultBox;\nexport default ResultBox;\nvar _c;\n$RefreshReg$(_c, \"ResultBox\");","map":{"version":3,"names":["useEffect","useState","ResultBox","props","words","setWords","characters","setCharacters","sentences","setSentences","paragraphs","setParagraphs","pronouns","setPronouns","countWords","text","trim","split","filter","word","length","wordCount","resultData","console","log","resultBar","title","value","map"],"sources":["C:/js/projects/copy/src/components/ResultBox/index.tsx"],"sourcesContent":["import './index.scss'\nimport { useEffect, useState } from 'react'\n\ntype PropsType = {\n  resultData: string\n}\n\nconst ResultBox = (props: PropsType) => {\n  const [words, setWords] = useState(0)\n  const [characters, setCharacters] = useState(0)\n  const [sentences, setSentences] = useState(0)\n  const [paragraphs, setParagraphs] = useState(0)\n  const [pronouns, setPronouns] = useState(0)\n\n  function countWords(text: string) {\n    // Удаляем все пробелы в начале и конце текста\n    text = text.trim()\n\n    // Разделяем текст на отдельные слова по пробелам\n    var words = text.split(' ')\n\n    // Удаляем пустые элементы массива (в случае множественных пробелов)\n    words = words.filter(function (word) {\n      return word.length > 0\n    })\n\n    // Возвращаем количество слов\n    return words.length\n  }\n\n  // Пример использования\n\n  var wordCount = countWords(props.resultData)\n\n  console.log(props.resultData.trim().split(' ').length)\n\n  useEffect(() => {\n    //setCharacters(props.resultData.length)\n    setWords(wordCount)\n  }, [props])\n\n  const resultBar = [\n    {\n      title: 'Words',\n      value: words,\n    },\n    {\n      title: 'Characters',\n      value: characters,\n    },\n    {\n      title: 'Sentences',\n      value: sentences,\n    },\n    {\n      title: 'Paragraphs ',\n      value: paragraphs,\n    },\n    {\n      title: 'Pronouns',\n      value: pronouns,\n    },\n  ]\n\n  return (\n    <div className=\"result-bar\">\n      {resultBar.map(({ title, value }) => (\n        <div className=\"result-box\" key={title}>\n          <span className=\"box-title\">{title}</span>\n          <span className=\"box-value\">{value}</span>\n        </div>\n      ))}\n    </div>\n  )\n}\n\nexport default ResultBox\n"],"mappings":";;AAAA,OAAO,cAAc;AACrB,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAA;AAM3C,MAAMC,SAAS,GAAIC,KAAgB,IAAK;EAAA;EACtC,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGJ,QAAQ,CAAC,CAAC,CAAC;EACrC,MAAM,CAACK,UAAU,EAAEC,aAAa,CAAC,GAAGN,QAAQ,CAAC,CAAC,CAAC;EAC/C,MAAM,CAACO,SAAS,EAAEC,YAAY,CAAC,GAAGR,QAAQ,CAAC,CAAC,CAAC;EAC7C,MAAM,CAACS,UAAU,EAAEC,aAAa,CAAC,GAAGV,QAAQ,CAAC,CAAC,CAAC;EAC/C,MAAM,CAACW,QAAQ,EAAEC,WAAW,CAAC,GAAGZ,QAAQ,CAAC,CAAC,CAAC;EAE3C,SAASa,UAAU,CAACC,IAAY,EAAE;IAChC;IACAA,IAAI,GAAGA,IAAI,CAACC,IAAI,EAAE;;IAElB;IACA,IAAIZ,KAAK,GAAGW,IAAI,CAACE,KAAK,CAAC,GAAG,CAAC;;IAE3B;IACAb,KAAK,GAAGA,KAAK,CAACc,MAAM,CAAC,UAAUC,IAAI,EAAE;MACnC,OAAOA,IAAI,CAACC,MAAM,GAAG,CAAC;IACxB,CAAC,CAAC;;IAEF;IACA,OAAOhB,KAAK,CAACgB,MAAM;EACrB;;EAEA;;EAEA,IAAIC,SAAS,GAAGP,UAAU,CAACX,KAAK,CAACmB,UAAU,CAAC;EAE5CC,OAAO,CAACC,GAAG,CAACrB,KAAK,CAACmB,UAAU,CAACN,IAAI,EAAE,CAACC,KAAK,CAAC,GAAG,CAAC,CAACG,MAAM,CAAC;EAEtDpB,SAAS,CAAC,MAAM;IACd;IACAK,QAAQ,CAACgB,SAAS,CAAC;EACrB,CAAC,EAAE,CAAClB,KAAK,CAAC,CAAC;EAEX,MAAMsB,SAAS,GAAG,CAChB;IACEC,KAAK,EAAE,OAAO;IACdC,KAAK,EAAEvB;EACT,CAAC,EACD;IACEsB,KAAK,EAAE,YAAY;IACnBC,KAAK,EAAErB;EACT,CAAC,EACD;IACEoB,KAAK,EAAE,WAAW;IAClBC,KAAK,EAAEnB;EACT,CAAC,EACD;IACEkB,KAAK,EAAE,aAAa;IACpBC,KAAK,EAAEjB;EACT,CAAC,EACD;IACEgB,KAAK,EAAE,UAAU;IACjBC,KAAK,EAAEf;EACT,CAAC,CACF;EAED,oBACE;IAAK,SAAS,EAAC,YAAY;IAAA,UACxBa,SAAS,CAACG,GAAG,CAAC;MAAA,IAAC;QAAEF,KAAK;QAAEC;MAAM,CAAC;MAAA,oBAC9B;QAAK,SAAS,EAAC,YAAY;QAAA,wBACzB;UAAM,SAAS,EAAC,WAAW;UAAA,UAAED;QAAK;UAAA;UAAA;UAAA;QAAA,QAAQ,eAC1C;UAAM,SAAS,EAAC,WAAW;UAAA,UAAEC;QAAK;UAAA;UAAA;UAAA;QAAA,QAAQ;MAAA,GAFXD,KAAK;QAAA;QAAA;QAAA;MAAA,QAGhC;IAAA,CACP;EAAC;IAAA;IAAA;IAAA;EAAA,QACE;AAEV,CAAC;AAAA,GAnEKxB,SAAS;AAAA,KAATA,SAAS;AAqEf,eAAeA,SAAS;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}