{"ast":null,"code":"var _jsxFileName = \"C:\\\\js\\\\projects\\\\copy\\\\src\\\\components\\\\ResultBox\\\\index.tsx\",\n  _s = $RefreshSig$();\nimport './index.scss';\nimport { useEffect, useState } from 'react';\nimport { pronouns } from '../../data/pronouns';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ResultBox = props => {\n  _s();\n  let data = props.resultData;\n  const [words, setWords] = useState(0);\n  const [characters, setCharacters] = useState(0);\n  const [sentences, setSentences] = useState(0);\n  const [paragraphs, setParagraphs] = useState(0);\n  const [pronounses, setPronounses] = useState(0);\n  let countPronouns = 0;\n  let dataArray = data.trim().split(' ');\n  for (let i = 0; i < dataArray.length; i++) {\n    if (pronouns.includes(dataArray[i])) {\n      countPronouns++;\n    }\n  }\n  function countWords(text) {\n    // Удаляем все пробелы в начале и конце текста\n    text = text.trim();\n\n    // Разделяем текст на отдельные слова по пробелам\n    let words = text.split(' ');\n\n    // Удаляем пустые элементы массива (в случае множественных пробелов)\n    words = words.filter(function (word) {\n      return word.length > 0;\n    });\n\n    // Возвращаем количество слов\n    return words.length;\n  }\n  function countSentences(text) {\n    // Разделяем текст на предложения, используя разделители [.?!]\n    let sentences = text.split(/[.?!]+/);\n\n    // Удаляем пустые элементы массива (в случае множественных разделителей)\n    sentences = sentences.filter(function (sentence) {\n      return sentence.length > 0;\n    });\n\n    // Возвращаем количество предложений\n    return sentences.length;\n  }\n  function countParagraphs(text) {\n    // Разбиваем текст на строки\n    let lines = text.split('\\n');\n\n    // Фильтруем пустые строки\n    let nonEmptyLines = lines.filter(function (line) {\n      return line.trim() !== '';\n    });\n\n    // Возвращаем количество непустых строк (параграфов)\n    return nonEmptyLines.length;\n  }\n  // Пример использования\n  const sentenceCount = countSentences(data);\n  const wordCount = countWords(data);\n  const paragraphCount = countParagraphs(data);\n  useEffect(() => {\n    setCharacters(data.length);\n    setWords(wordCount);\n    setSentences(sentenceCount);\n    setParagraphs(paragraphCount);\n    setPronounses(countPronouns);\n  }, [props]);\n  const resultBar = [{\n    title: 'Words',\n    value: words\n  }, {\n    title: 'Characters',\n    value: characters\n  }, {\n    title: 'Sentences',\n    value: sentences\n  }, {\n    title: 'Paragraphs ',\n    value: paragraphs\n  }, {\n    title: 'Pronouns',\n    value: pronounses\n  }];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"result-bar\",\n    children: resultBar.map(_ref => {\n      let {\n        title,\n        value\n      } = _ref;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"result-box\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"box-title\",\n          children: title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"box-value\",\n          children: value\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 11\n        }, this)]\n      }, title, true, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 5\n  }, this);\n};\n_s(ResultBox, \"4k9K9txA3XTbF9IhE1hYbr7YLQM=\");\n_c = ResultBox;\nexport default ResultBox;\nvar _c;\n$RefreshReg$(_c, \"ResultBox\");","map":{"version":3,"names":["useEffect","useState","pronouns","ResultBox","props","data","resultData","words","setWords","characters","setCharacters","sentences","setSentences","paragraphs","setParagraphs","pronounses","setPronounses","countPronouns","dataArray","trim","split","i","length","includes","countWords","text","filter","word","countSentences","sentence","countParagraphs","lines","nonEmptyLines","line","sentenceCount","wordCount","paragraphCount","resultBar","title","value","map"],"sources":["C:/js/projects/copy/src/components/ResultBox/index.tsx"],"sourcesContent":["import './index.scss'\nimport { useEffect, useState } from 'react'\nimport { pronouns } from '../../data/pronouns'\n\ntype PropsType = {\n  resultData: string\n}\n\nconst ResultBox = (props: PropsType) => {\n  let data = props.resultData\n\n\n  const [words, setWords] = useState(0)\n  const [characters, setCharacters] = useState(0)\n  const [sentences, setSentences] = useState(0)\n  const [paragraphs, setParagraphs] = useState(0)\n  const [pronounses, setPronounses] = useState(0)\n\n\n\n\n  let countPronouns = 0\n  let dataArray = data.trim().split(' ')\n  for (let i = 0; i < dataArray.length; i++) {\n    if (pronouns.includes(dataArray[i])) {\n      countPronouns++\n    }\n  }\n\n  function countWords(text: string) {\n    // Удаляем все пробелы в начале и конце текста\n    text = text.trim()\n\n    // Разделяем текст на отдельные слова по пробелам\n    let words = text.split(' ')\n\n    // Удаляем пустые элементы массива (в случае множественных пробелов)\n    words = words.filter(function (word) {\n      return word.length > 0\n    })\n\n    // Возвращаем количество слов\n    return words.length\n  }\n  function countSentences(text: string) {\n    // Разделяем текст на предложения, используя разделители [.?!]\n    let sentences = text.split(/[.?!]+/)\n\n    // Удаляем пустые элементы массива (в случае множественных разделителей)\n    sentences = sentences.filter(function (sentence) {\n      return sentence.length > 0\n    })\n\n    // Возвращаем количество предложений\n    return sentences.length\n  }\n  function countParagraphs(text: string) {\n    // Разбиваем текст на строки\n    let lines = text.split('\\n')\n\n    // Фильтруем пустые строки\n    let nonEmptyLines = lines.filter(function (line) {\n      return line.trim() !== ''\n    })\n\n    // Возвращаем количество непустых строк (параграфов)\n    return nonEmptyLines.length\n  }\n  // Пример использования\n  const sentenceCount = countSentences(data)\n  const wordCount = countWords(data)\n  const paragraphCount = countParagraphs(data)\n\n  useEffect(() => {\n    setCharacters(data.length)\n    setWords(wordCount)\n    setSentences(sentenceCount)\n    setParagraphs(paragraphCount)\n    setPronounses(countPronouns)\n  }, [props])\n\n  const resultBar = [\n    {\n      title: 'Words',\n      value: words,\n    },\n    {\n      title: 'Characters',\n      value: characters,\n    },\n    {\n      title: 'Sentences',\n      value: sentences,\n    },\n    {\n      title: 'Paragraphs ',\n      value: paragraphs,\n    },\n    {\n      title: 'Pronouns',\n      value: pronounses,\n    },\n  ]\n\n  return (\n    <div className=\"result-bar\">\n      {resultBar.map(({ title, value }) => (\n        <div className=\"result-box\" key={title}>\n          <span className=\"box-title\">{title}</span>\n          <span className=\"box-value\">{value}</span>\n        </div>\n      ))}\n    </div>\n  )\n}\n\nexport default ResultBox\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}