{"ast":null,"code":"var _jsxFileName = \"C:\\\\js\\\\projects\\\\copy\\\\src\\\\components\\\\ResultBox\\\\index.tsx\",\n  _s = $RefreshSig$();\nimport './index.scss';\nimport { useEffect, useState } from 'react';\nimport { pronouns } from '../../data/pronouns';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ResultBox = props => {\n  _s();\n  let data = props.resultData;\n  const [words, setWords] = useState(0);\n  const [characters, setCharacters] = useState(0);\n  const [sentences, setSentences] = useState(0);\n  const [paragraphs, setParagraphs] = useState(0);\n  const [pronounses, setPronounses] = useState(0);\n  function checkStringForWords(string, wordsArray) {\n    // Приводим строку к нижнему регистру для сравнения без учета регистра\n    let lowercaseString = string.toLowerCase();\n\n    // Перебираем слова из массива и проверяем их наличие в строке\n    for (let i = 0; i < wordsArray.length; i++) {\n      let word = wordsArray[i].toLowerCase();\n      if (lowercaseString.indexOf(word) !== -1) {\n        return true; // Если найдено хотя бы одно слово, возвращаем true\n      }\n    }\n\n    return false; // Если ни одно слово не найдено, возвращаем false\n  }\n\n  const containsWords = checkStringForWords(data, pronouns);\n  function countWords(text) {\n    // Удаляем все пробелы в начале и конце текста\n    text = text.trim();\n\n    // Разделяем текст на отдельные слова по пробелам\n    let words = text.split(' ');\n\n    // Удаляем пустые элементы массива (в случае множественных пробелов)\n    words = words.filter(function (word) {\n      return word.length > 0;\n    });\n\n    // Возвращаем количество слов\n    return words.length;\n  }\n  function countSentences(text) {\n    // Разделяем текст на предложения, используя разделители [.?!]\n    let sentences = text.split(/[.?!]+/);\n\n    // Удаляем пустые элементы массива (в случае множественных разделителей)\n    sentences = sentences.filter(function (sentence) {\n      return sentence.length > 0;\n    });\n\n    // Возвращаем количество предложений\n    return sentences.length;\n  }\n  function countParagraphs(text) {\n    // Разбиваем текст на строки\n    let lines = text.split('\\n');\n\n    // Фильтруем пустые строки\n    let nonEmptyLines = lines.filter(function (line) {\n      return line.trim() !== '';\n    });\n\n    // Возвращаем количество непустых строк (параграфов)\n    return nonEmptyLines.length;\n  }\n  // Пример использования\n  const sentenceCount = countSentences(data);\n  const wordCount = countWords(data);\n  const paragraphCount = countParagraphs(data);\n  useEffect(() => {\n    setCharacters(data.length);\n    setWords(wordCount);\n    setSentences(sentenceCount);\n    setParagraphs(paragraphCount);\n    setPronounses(containsWords);\n  }, [props]);\n  const resultBar = [{\n    title: 'Words',\n    value: words\n  }, {\n    title: 'Characters',\n    value: characters\n  }, {\n    title: 'Sentences',\n    value: sentences\n  }, {\n    title: 'Paragraphs ',\n    value: paragraphs\n  }, {\n    title: 'Pronouns',\n    value: pronounses\n  }];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"result-bar\",\n    children: resultBar.map(_ref => {\n      let {\n        title,\n        value\n      } = _ref;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"result-box\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"box-title\",\n          children: title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"box-value\",\n          children: value\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 11\n        }, this)]\n      }, title, true, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 5\n  }, this);\n};\n_s(ResultBox, \"4k9K9txA3XTbF9IhE1hYbr7YLQM=\");\n_c = ResultBox;\nexport default ResultBox;\nvar _c;\n$RefreshReg$(_c, \"ResultBox\");","map":{"version":3,"names":["useEffect","useState","pronouns","ResultBox","props","data","resultData","words","setWords","characters","setCharacters","sentences","setSentences","paragraphs","setParagraphs","pronounses","setPronounses","checkStringForWords","string","wordsArray","lowercaseString","toLowerCase","i","length","word","indexOf","containsWords","countWords","text","trim","split","filter","countSentences","sentence","countParagraphs","lines","nonEmptyLines","line","sentenceCount","wordCount","paragraphCount","resultBar","title","value","map"],"sources":["C:/js/projects/copy/src/components/ResultBox/index.tsx"],"sourcesContent":["import './index.scss'\nimport { useEffect, useState } from 'react'\nimport { pronouns } from '../../data/pronouns'\n\ntype PropsType = {\n  resultData: string\n}\n\nconst ResultBox = (props: PropsType) => {\n  let data = props.resultData\n\n  const [words, setWords] = useState(0)\n  const [characters, setCharacters] = useState(0)\n  const [sentences, setSentences] = useState(0)\n  const [paragraphs, setParagraphs] = useState(0)\n  const [pronounses, setPronounses] = useState(0)\n\n  function checkStringForWords(string: string, wordsArray: Array<string>) {\n    // Приводим строку к нижнему регистру для сравнения без учета регистра\n    let lowercaseString = string.toLowerCase()\n\n    // Перебираем слова из массива и проверяем их наличие в строке\n    for (let i = 0; i < wordsArray.length; i++) {\n      let word = wordsArray[i].toLowerCase()\n      if (lowercaseString.indexOf(word) !== -1) {\n        return true // Если найдено хотя бы одно слово, возвращаем true\n      }\n    }\n\n    return false // Если ни одно слово не найдено, возвращаем false\n  }\n  const containsWords = checkStringForWords(data, pronouns)\n  function countWords(text: string) {\n    // Удаляем все пробелы в начале и конце текста\n    text = text.trim()\n\n    // Разделяем текст на отдельные слова по пробелам\n    let words = text.split(' ')\n\n    // Удаляем пустые элементы массива (в случае множественных пробелов)\n    words = words.filter(function (word) {\n      return word.length > 0\n    })\n\n    // Возвращаем количество слов\n    return words.length\n  }\n  function countSentences(text: string) {\n    // Разделяем текст на предложения, используя разделители [.?!]\n    let sentences = text.split(/[.?!]+/)\n\n    // Удаляем пустые элементы массива (в случае множественных разделителей)\n    sentences = sentences.filter(function (sentence) {\n      return sentence.length > 0\n    })\n\n    // Возвращаем количество предложений\n    return sentences.length\n  }\n  function countParagraphs(text: string) {\n    // Разбиваем текст на строки\n    let lines = text.split('\\n')\n\n    // Фильтруем пустые строки\n    let nonEmptyLines = lines.filter(function (line) {\n      return line.trim() !== ''\n    })\n\n    // Возвращаем количество непустых строк (параграфов)\n    return nonEmptyLines.length\n  }\n  // Пример использования\n  const sentenceCount = countSentences(data)\n  const wordCount = countWords(data)\n  const paragraphCount = countParagraphs(data)\n\n  useEffect(() => {\n    setCharacters(data.length)\n    setWords(wordCount)\n    setSentences(sentenceCount)\n    setParagraphs(paragraphCount)\n    setPronounses(containsWords)\n  }, [props])\n\n  const resultBar = [\n    {\n      title: 'Words',\n      value: words,\n    },\n    {\n      title: 'Characters',\n      value: characters,\n    },\n    {\n      title: 'Sentences',\n      value: sentences,\n    },\n    {\n      title: 'Paragraphs ',\n      value: paragraphs,\n    },\n    {\n      title: 'Pronouns',\n      value: pronounses,\n    },\n  ]\n\n  return (\n    <div className=\"result-bar\">\n      {resultBar.map(({ title, value }) => (\n        <div className=\"result-box\" key={title}>\n          <span className=\"box-title\">{title}</span>\n          <span className=\"box-value\">{value}</span>\n        </div>\n      ))}\n    </div>\n  )\n}\n\nexport default ResultBox\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}