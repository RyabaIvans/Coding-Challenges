[{"C:\\js\\projects\\copy\\src\\index.tsx":"1","C:\\js\\projects\\copy\\src\\reportWebVitals.ts":"2","C:\\js\\projects\\copy\\src\\App.tsx":"3","C:\\js\\projects\\copy\\src\\components\\BottomResultBox\\index.tsx":"4","C:\\js\\projects\\copy\\src\\components\\Footer\\index.tsx":"5","C:\\js\\projects\\copy\\src\\components\\TextArea\\index.tsx":"6","C:\\js\\projects\\copy\\src\\components\\Navbar\\index.tsx":"7","C:\\js\\projects\\copy\\src\\components\\ResultBox\\index.tsx":"8","C:\\js\\projects\\copy\\src\\data\\pronouns.ts":"9"},{"size":473,"mtime":1686748670204,"results":"10","hashOfConfig":"11"},{"size":425,"mtime":1686662842476,"results":"12","hashOfConfig":"11"},{"size":747,"mtime":1686752759305,"results":"13","hashOfConfig":"11"},{"size":1114,"mtime":1686753300204,"results":"14","hashOfConfig":"11"},{"size":385,"mtime":1686753643896,"results":"15","hashOfConfig":"11"},{"size":546,"mtime":1686748816610,"results":"16","hashOfConfig":"11"},{"size":1033,"mtime":1686753479141,"results":"17","hashOfConfig":"11"},{"size":3810,"mtime":1686752598880,"results":"18","hashOfConfig":"11"},{"size":421,"mtime":1686662842807,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},"1giqz5d",{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"23"},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"23"},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\js\\projects\\copy\\src\\index.tsx",[],[],[],"C:\\js\\projects\\copy\\src\\reportWebVitals.ts",[],[],[],"C:\\js\\projects\\copy\\src\\App.tsx",[],[],"C:\\js\\projects\\copy\\src\\components\\BottomResultBox\\index.tsx",["51"],[],"C:\\js\\projects\\copy\\src\\components\\Footer\\index.tsx",[],[],"C:\\js\\projects\\copy\\src\\components\\TextArea\\index.tsx",["52","53","54"],[],"C:\\js\\projects\\copy\\src\\components\\Navbar\\index.tsx",["55","56"],[],"import { ReactComponent as Linkedin } from '../../assets/icons/linkedin.svg'\nimport { ReactComponent as Twitter } from '../../assets/icons/twitter.svg'\nimport { ReactComponent as Website } from '../../assets/icons/website.svg'\nimport './index.scss'\n\nconst Navbar = () => {\n  return (\n    <nav className=\"navbar\">\n      <div className=\"container\">\n        <div className=\"nav-elements\">\n          <span className=\"app-title\">Text Analyser</span>\n          <ul className=\"social-links\">\n            <li>\n              <a href=\"#\" target=\"_blank\" rel=\"noreferrer\">\n                <Website />\n              </a>\n            </li>\n            <li>\n              <a href=\"#\" target=\"_blank\" rel=\"noreferrer\">\n                <Twitter />\n              </a>\n            </li>\n            <li>\n              <a href=\"https://www.linkedin.com/in/ryabaivan/\" target=\"_blank\" rel=\"noreferrer\">\n                <Linkedin />\n              </a>\n            </li>\n          </ul>\n        </div>\n      </div>\n    </nav>\n  )\n}\n\nexport default Navbar\n","C:\\js\\projects\\copy\\src\\components\\ResultBox\\index.tsx",["57"],[],"import './index.scss'\nimport { useEffect, useState } from 'react'\nimport { pronouns } from '../../data/pronouns'\n\ntype PropsType = {\n  resultData: string\n}\n\nconst ResultBox = (props: PropsType) => {\n  let data = props.resultData\n\n  const [words, setWords] = useState(0)\n  const [characters, setCharacters] = useState(0)\n  const [sentences, setSentences] = useState(0)\n  const [paragraphs, setParagraphs] = useState(0)\n  const [pronounces, setPronounces] = useState(0)\n\n  function countWords(text: string) {\n    // Удаляем все пробелы в начале и конце текста\n    text = text.trim()\n\n    // Разделяем текст на отдельные слова по пробелам\n    let words = text.split(' ')\n\n    // Удаляем пустые элементы массива (в случае множественных пробелов)\n    words = words.filter(function (word) {\n      return word.length > 0\n    })\n\n    // Возвращаем количество слов\n    return words.length\n  }\n  function countSentences(text: string) {\n    // Разделяем текст на предложения, используя разделители [.?!]\n    let sentences = text.split(/[.?!]+/)\n\n    // Удаляем пустые элементы массива (в случае множественных разделителей)\n    sentences = sentences.filter(function (sentence) {\n      return sentence.length > 0\n    })\n\n    // Возвращаем количество предложений\n    return sentences.length\n  }\n  function countParagraphs(text: string) {\n    // Разбиваем текст на строки\n    let lines = text.split('\\n')\n\n    // Фильтруем пустые строки\n    let nonEmptyLines = lines.filter(function (line) {\n      return line.trim() !== ''\n    })\n\n    // Возвращаем количество непустых строк (параграфов)\n    return nonEmptyLines.length\n  }\n  function countMatchingWords(string: string, wordsArray: Array<string>) {\n    // Приводим строку к нижнему регистру для сравнения без учета регистра\n    let lowercaseString = string.toLowerCase()\n    let count = 0\n\n    for (let i = 0; i < wordsArray.length; i++) {\n      let word = wordsArray[i].toLowerCase()\n      let regex = new RegExp('\\\\b' + word + '\\\\b', 'g') // Создаем регулярное выражение для поиска слова с учетом границ слова\n      let matches = lowercaseString.match(regex)\n\n      if (matches !== null) {\n        count += matches.length // Увеличиваем счетчик на количество совпадений\n      }\n    }\n\n    return count\n  }\n\n  const sentenceCount = countSentences(data)\n  const wordCount = countWords(data)\n  const paragraphCount = countParagraphs(data)\n  const containsWords = countMatchingWords(data, pronouns)\n\n  useEffect(() => {\n    setCharacters(data.length)\n    setWords(wordCount)\n    setSentences(sentenceCount)\n    setParagraphs(paragraphCount)\n    setPronounces(containsWords)\n  }, [props])\n\n  const resultBar = [\n    {\n      title: 'Words',\n      value: words,\n    },\n    {\n      title: 'Characters',\n      value: characters,\n    },\n    {\n      title: 'Sentences',\n      value: sentences,\n    },\n    {\n      title: 'Paragraphs ',\n      value: paragraphs,\n    },\n    {\n      title: 'Pronouns',\n      value: pronounces,\n    },\n  ]\n\n  return (\n    <div className=\"result-bar\">\n      {resultBar.map(({ title, value }) => (\n        <div className=\"result-box\" key={title}>\n          <span className=\"box-title\">{title}</span>\n          <span className=\"box-value\">{value}</span>\n        </div>\n      ))}\n    </div>\n  )\n}\n\nexport default ResultBox\n","C:\\js\\projects\\copy\\src\\data\\pronouns.ts",[],[],{"ruleId":"58","severity":1,"message":"59","line":24,"column":6,"nodeType":"60","endLine":24,"endColumn":13,"suggestions":"61"},{"ruleId":"62","severity":1,"message":"63","line":2,"column":23,"nodeType":"64","messageId":"65","endLine":2,"endColumn":36},{"ruleId":"62","severity":1,"message":"66","line":2,"column":38,"nodeType":"64","messageId":"65","endLine":2,"endColumn":44},{"ruleId":"62","severity":1,"message":"67","line":8,"column":9,"nodeType":"64","messageId":"65","endLine":8,"endColumn":24},{"ruleId":"68","severity":1,"message":"69","line":14,"column":15,"nodeType":"70","endLine":14,"endColumn":60},{"ruleId":"68","severity":1,"message":"69","line":19,"column":15,"nodeType":"70","endLine":19,"endColumn":60},{"ruleId":"58","severity":1,"message":"71","line":86,"column":6,"nodeType":"60","endLine":86,"endColumn":13,"suggestions":"72"},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'averageSpeed' and 'longestWord'. Either include them or remove the dependency array.","ArrayExpression",["73"],"@typescript-eslint/no-unused-vars","'createContext' is defined but never used.","Identifier","unusedVar","'useRef' is defined but never used.","'onchangeHandler' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","React Hook useEffect has missing dependencies: 'containsWords', 'data.length', 'paragraphCount', 'sentenceCount', and 'wordCount'. Either include them or remove the dependency array.",["74"],{"desc":"75","fix":"76"},{"desc":"77","fix":"78"},"Update the dependencies array to be: [averageSpeed, longestWord, props]",{"range":"79","text":"80"},"Update the dependencies array to be: [containsWords, data.length, paragraphCount, props, sentenceCount, wordCount]",{"range":"81","text":"82"},[608,615],"[averageSpeed, longestWord, props]",[2613,2620],"[containsWords, data.length, paragraphCount, props, sentenceCount, wordCount]"]